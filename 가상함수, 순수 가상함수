//
// 가상함수와 순수 가상함수
// 순수 가상함수가 선언된 클래스는 추상 클래스라 부르며 객체를 생성할 수 없다.

class First {
public:
	virtual void Func() = 0;              // 순수 가상함수  -> 이 클래스는 추상클래스이고 따라서 객체를 생성할 수 없다.
};
class Second : public First {
public:
	virtual void Func() {
		cout << " Second" << endl;
	}
};
class Third : public Second {
public:
	//virtual void Func() {               // 순수 가상함수, 가상함수 둘 모두 꼭 재정의를 해야하는 것은 아니다.
	//	cout << " Third" << endl;         // 재정의를 하지 않을 경우 위로 올라가며 재정의가 된 함수를 찾아 실행한다.
	//}                                   // 추상 클래스 도달까지 재정의 함수가 없을 경우 컴파일 에러가 발생한다.
};


int main(void) {
	Third *tp	= new Third();		
	Second *sp	= tp;			
	First *fp	= sp;

	//First *tmp = new First();

	fp->Func();	// class Third 의 객체이므로 일단 Third에 가서 Func() 찾고 없으면 위로 올라간다.
	sp->Func();	// 만약 class Second 의 객체였다면 바로 Second에 가서 Func()를 찾고 없으면  올라간다.
	tp->Func();
	return 0;
}

//
// 가상함수 사용시 base class 포인터가 derived class 의 overwrite한 함수를 참조할 수 있는 이유
// 가상함수를 포함하는 class의 경우 compiler가 가상 함수 테이블을 만든다.
// 이는 함수의 원형을 Key로 하고 함수의 주소값을 Value로 하는 Table이며 V-table (Virtual Table)이라 부른다.
//
// 컴파일시 각 class 별로 Derived class부터 시작해서 Base class로 올라가며 함수 원형을 Key값으로 V-table을 만든다.
// 자연스럽게 동일한 Key값을 (함수 원형) 가지는 데이터는 입력에서 제외된다. (Overwriting 당한 부모 class의 함수)
// new로 객체 생성시 객체를 위해 할당된 메모리에 객체의 자료형에 맞는 V-table 포인터를 붙혀서 준다.
// 부모 class의 포인터로 참조한 객체의 V-table 주소를 참조하면 참조하는 객체별 자료형에 맞는 V-table을 참조할 수 있다.
//

class Base {
public:
	int a;
	char b;
	Base() : a(0xaa), b(0xb){ }
	virtual void Func(void) { 
		cout << "[Base]Func" << endl; 
	}
	virtual void base_func(void) {
		cout << "[Base]base_func" << endl;
	}
};
class Derived : public Base {
public:
	Derived() {}
	virtual void Func(void) {
		Base::Func();
		cout << "[Derived]Func" << endl;
	}
	void derived_func(void) {
		cout << "[Derived]derived_func" << endl;
	}
};

int main(void) {
	Base *p1 = new Base;
	Base *t1 = new Base;
	Base *p2 = new Derived;
	Base *t2 = new Derived;
	Derived *t3 = new Derived;

	p1->Func();
	p2->Func();
	return 0;
}

// 실제 virtual 함수를 포함하는 class의 객체 생성 후 메모리 확인시 멤버 변수 값 앞에 자료형별 V-table 포인터를 확인할 수 있었다.
